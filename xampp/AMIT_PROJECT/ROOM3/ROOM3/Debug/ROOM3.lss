
ROOM3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000007ae  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000842  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000161e  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ee  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cd7  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  000035ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000611  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b97  00000000  00000000  00003db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 00 03 	call	0x600	; 0x600 <main>
  7a:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_u8SetPinDirection>:
	{
		Local_u8ErrorState = NOK ;
	}
	
	return Local_u8ErrorState ;
}
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinDirection+0x6>
  86:	7b c0       	rjmp	.+246    	; 0x17e <DIO_u8SetPinDirection+0xfc>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_u8SetPinDirection+0xc>
  8c:	7a c0       	rjmp	.+244    	; 0x182 <DIO_u8SetPinDirection+0x100>
  8e:	41 11       	cpse	r20, r1
  90:	3c c0       	rjmp	.+120    	; 0x10a <DIO_u8SetPinDirection+0x88>
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	99 f0       	breq	.+38     	; 0xbc <DIO_u8SetPinDirection+0x3a>
  96:	28 f0       	brcs	.+10     	; 0xa2 <DIO_u8SetPinDirection+0x20>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	e9 f0       	breq	.+58     	; 0xd6 <DIO_u8SetPinDirection+0x54>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	41 f1       	breq	.+80     	; 0xf0 <DIO_u8SetPinDirection+0x6e>
  a0:	72 c0       	rjmp	.+228    	; 0x186 <DIO_u8SetPinDirection+0x104>
  a2:	2a b3       	in	r18, 0x1a	; 26
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_u8SetPinDirection+0x2c>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_u8SetPinDirection+0x28>
  b2:	80 95       	com	r24
  b4:	82 23       	and	r24, r18
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	08 95       	ret
  bc:	27 b3       	in	r18, 0x17	; 23
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_u8SetPinDirection+0x46>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_u8SetPinDirection+0x42>
  cc:	80 95       	com	r24
  ce:	82 23       	and	r24, r18
  d0:	87 bb       	out	0x17, r24	; 23
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret
  d6:	24 b3       	in	r18, 0x14	; 20
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_u8SetPinDirection+0x60>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_u8SetPinDirection+0x5c>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	21 b3       	in	r18, 0x11	; 17
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_u8SetPinDirection+0x7a>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_u8SetPinDirection+0x76>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	81 bb       	out	0x11, r24	; 17
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	f1 f5       	brne	.+124    	; 0x18a <DIO_u8SetPinDirection+0x108>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 f0       	breq	.+36     	; 0x136 <DIO_u8SetPinDirection+0xb4>
 112:	28 f0       	brcs	.+10     	; 0x11e <DIO_u8SetPinDirection+0x9c>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	d9 f0       	breq	.+54     	; 0x14e <DIO_u8SetPinDirection+0xcc>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	29 f1       	breq	.+74     	; 0x166 <DIO_u8SetPinDirection+0xe4>
 11c:	38 c0       	rjmp	.+112    	; 0x18e <DIO_u8SetPinDirection+0x10c>
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_u8SetPinDirection+0xa8>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_u8SetPinDirection+0xa4>
 12e:	82 2b       	or	r24, r18
 130:	8a bb       	out	0x1a, r24	; 26
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
 136:	27 b3       	in	r18, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_u8SetPinDirection+0xc0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_u8SetPinDirection+0xbc>
 146:	82 2b       	or	r24, r18
 148:	87 bb       	out	0x17, r24	; 23
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinDirection+0xd8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinDirection+0xd4>
 15e:	82 2b       	or	r24, r18
 160:	84 bb       	out	0x14, r24	; 20
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_u8SetPinDirection+0xf0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_u8SetPinDirection+0xec>
 176:	82 2b       	or	r24, r18
 178:	81 bb       	out	0x11, r24	; 17
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 95       	ret
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	08 95       	ret
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	08 95       	ret
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret

00000192 <DIO_u8SetPinVa1ue>:

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
	
	if( DIO_u8PORTD >= Copy_u8Port )
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	08 f0       	brcs	.+2      	; 0x198 <DIO_u8SetPinVa1ue+0x6>
 196:	7b c0       	rjmp	.+246    	; 0x28e <DIO_u8SetPinVa1ue+0xfc>
	{
		if( DIO_u8PIN7 >= Copy_u8Pin )
 198:	68 30       	cpi	r22, 0x08	; 8
 19a:	08 f0       	brcs	.+2      	; 0x19e <DIO_u8SetPinVa1ue+0xc>
 19c:	7a c0       	rjmp	.+244    	; 0x292 <DIO_u8SetPinVa1ue+0x100>
		{
			if ( DIO_u8PIN_HIGH == Copy_u8Va1ue )
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	c1 f5       	brne	.+112    	; 0x212 <DIO_u8SetPinVa1ue+0x80>
			{
				switch ( Copy_u8Port )
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 f0       	breq	.+36     	; 0x1ca <DIO_u8SetPinVa1ue+0x38>
 1a6:	28 f0       	brcs	.+10     	; 0x1b2 <DIO_u8SetPinVa1ue+0x20>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	d9 f0       	breq	.+54     	; 0x1e2 <DIO_u8SetPinVa1ue+0x50>
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	29 f1       	breq	.+74     	; 0x1fa <DIO_u8SetPinVa1ue+0x68>
 1b0:	72 c0       	rjmp	.+228    	; 0x296 <DIO_u8SetPinVa1ue+0x104>
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
 1b2:	2b b3       	in	r18, 0x1b	; 27
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_u8SetPinVa1ue+0x2c>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_u8SetPinVa1ue+0x28>
 1c2:	82 2b       	or	r24, r18
 1c4:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
		{
			if ( DIO_u8PIN_HIGH == Copy_u8Va1ue )
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
 1c8:	08 95       	ret
					case DIO_u8PORTB : SET_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_u8SetPinVa1ue+0x44>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_u8SetPinVa1ue+0x40>
 1da:	82 2b       	or	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 1de:	80 e0       	ldi	r24, 0x00	; 0
			if ( DIO_u8PIN_HIGH == Copy_u8Va1ue )
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : SET_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
 1e0:	08 95       	ret
					case DIO_u8PORTC : SET_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_u8SetPinVa1ue+0x5c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_u8SetPinVa1ue+0x58>
 1f2:	82 2b       	or	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : SET_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : SET_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
 1f8:	08 95       	ret
					case DIO_u8PORTD : SET_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
 1fa:	22 b3       	in	r18, 0x12	; 18
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_u8SetPinVa1ue+0x74>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_u8SetPinVa1ue+0x70>
 20a:	82 2b       	or	r24, r18
 20c:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 20e:	80 e0       	ldi	r24, 0x00	; 0
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : SET_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : SET_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTD : SET_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
 210:	08 95       	ret
					default: Local_u8ErrorState = NOK ; break;
				}
			}
			else if ( DIO_u8PIN_LOW == Copy_u8Va1ue )
 212:	41 11       	cpse	r20, r1
 214:	42 c0       	rjmp	.+132    	; 0x29a <DIO_u8SetPinVa1ue+0x108>
			{
				switch ( Copy_u8Port )
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	99 f0       	breq	.+38     	; 0x240 <DIO_u8SetPinVa1ue+0xae>
 21a:	28 f0       	brcs	.+10     	; 0x226 <DIO_u8SetPinVa1ue+0x94>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	e9 f0       	breq	.+58     	; 0x25a <DIO_u8SetPinVa1ue+0xc8>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	41 f1       	breq	.+80     	; 0x274 <DIO_u8SetPinVa1ue+0xe2>
 224:	3c c0       	rjmp	.+120    	; 0x29e <DIO_u8SetPinVa1ue+0x10c>
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_u8SetPinVa1ue+0xa0>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_u8SetPinVa1ue+0x9c>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 23c:	80 e0       	ldi	r24, 0x00	; 0
			}
			else if ( DIO_u8PIN_LOW == Copy_u8Va1ue )
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
 23e:	08 95       	ret
					case DIO_u8PORTB : CLR_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_u8SetPinVa1ue+0xba>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_u8SetPinVa1ue+0xb6>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 256:	80 e0       	ldi	r24, 0x00	; 0
			else if ( DIO_u8PIN_LOW == Copy_u8Va1ue )
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : CLR_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
 258:	08 95       	ret
					case DIO_u8PORTC : CLR_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
 25a:	25 b3       	in	r18, 0x15	; 21
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_u8SetPinVa1ue+0xd4>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_u8SetPinVa1ue+0xd0>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 270:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : CLR_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : CLR_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
 272:	08 95       	ret
					case DIO_u8PORTD : CLR_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
 274:	22 b3       	in	r18, 0x12	; 18
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_u8SetPinVa1ue+0xee>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_u8SetPinVa1ue+0xea>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 28a:	80 e0       	ldi	r24, 0x00	; 0
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : CLR_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : CLR_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTD : CLR_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
 28c:	08 95       	ret
			Local_u8ErrorState = NOK ;
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret
				Local_u8ErrorState = NOK ;
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	08 95       	ret
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : SET_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : SET_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTD : SET_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
					default: Local_u8ErrorState = NOK ; break;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
					default: Local_u8ErrorState = NOK ; break;
				}
			}
			else
			{
				Local_u8ErrorState = NOK ;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	08 95       	ret
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : CLR_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : CLR_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTD : CLR_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
					default: Local_u8ErrorState = NOK ; break;
 29e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErrorState = NOK ;
	}
	return Local_u8ErrorState ;
}
 2a0:	08 95       	ret

000002a2 <DIO_u8SetPortVa1ue>:

u8 DIO_u8SetPortVa1ue (u8 Copy_u8Port, u8 Copy_u8Va1ue) 
{
	u8 Local_u8ErrorState = OK ;
	
	if ( DIO_u8PORTD >= Copy_u8Port )
 2a2:	84 30       	cpi	r24, 0x04	; 4
 2a4:	a0 f4       	brcc	.+40     	; 0x2ce <DIO_u8SetPortVa1ue+0x2c>
	{
		switch ( Copy_u8Port )
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	49 f0       	breq	.+18     	; 0x2bc <DIO_u8SetPortVa1ue+0x1a>
 2aa:	28 f0       	brcs	.+10     	; 0x2b6 <DIO_u8SetPortVa1ue+0x14>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	49 f0       	breq	.+18     	; 0x2c2 <DIO_u8SetPortVa1ue+0x20>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	51 f0       	breq	.+20     	; 0x2c8 <DIO_u8SetPortVa1ue+0x26>
 2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <DIO_u8SetPortVa1ue+0x30>
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
 2b6:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPortVa1ue (u8 Copy_u8Port, u8 Copy_u8Va1ue) 
{
	u8 Local_u8ErrorState = OK ;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
	
	if ( DIO_u8PORTD >= Copy_u8Port )
	{
		switch ( Copy_u8Port )
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
 2ba:	08 95       	ret
			case DIO_u8PORTB : DIO_PORTB_REG = Copy_u8Va1ue ; break;
 2bc:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPortVa1ue (u8 Copy_u8Port, u8 Copy_u8Va1ue) 
{
	u8 Local_u8ErrorState = OK ;
 2be:	80 e0       	ldi	r24, 0x00	; 0
	if ( DIO_u8PORTD >= Copy_u8Port )
	{
		switch ( Copy_u8Port )
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTB : DIO_PORTB_REG = Copy_u8Va1ue ; break;
 2c0:	08 95       	ret
			case DIO_u8PORTC : DIO_PORTC_REG = Copy_u8Va1ue ; break;
 2c2:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPortVa1ue (u8 Copy_u8Port, u8 Copy_u8Va1ue) 
{
	u8 Local_u8ErrorState = OK ;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch ( Copy_u8Port )
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTB : DIO_PORTB_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTC : DIO_PORTC_REG = Copy_u8Va1ue ; break;
 2c6:	08 95       	ret
			case DIO_u8PORTD : DIO_PORTD_REG = Copy_u8Va1ue ; break;
 2c8:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPortVa1ue (u8 Copy_u8Port, u8 Copy_u8Va1ue) 
{
	u8 Local_u8ErrorState = OK ;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
		switch ( Copy_u8Port )
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTB : DIO_PORTB_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTC : DIO_PORTC_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTD : DIO_PORTD_REG = Copy_u8Va1ue ; break;
 2cc:	08 95       	ret
			default: Local_u8ErrorState = NOK ;
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	08 95       	ret
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTB : DIO_PORTB_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTC : DIO_PORTC_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTD : DIO_PORTD_REG = Copy_u8Va1ue ; break;
			default: Local_u8ErrorState = NOK ;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState = NOK ;
	}
	
	return Local_u8ErrorState ;
}
 2d4:	08 95       	ret

000002d6 <DIO_u8GetPinVaIue>:

u8 DIO_u8GetPinVaIue (u8 Copy_u8Port,u8 Copy_u8Pin, u8 *Copy_pu8Value )
{
	u8 Local_u8ErrorState = OK ;
	
	if( DIO_u8PORTD >= Copy_u8Port )
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	60 f5       	brcc	.+88     	; 0x332 <DIO_u8GetPinVaIue+0x5c>
	{
		if( DIO_u8PIN7 >= Copy_u8Pin )
 2da:	68 30       	cpi	r22, 0x08	; 8
 2dc:	60 f5       	brcc	.+88     	; 0x336 <DIO_u8GetPinVaIue+0x60>
		{
			switch ( Copy_u8Port )
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	81 f0       	breq	.+32     	; 0x302 <DIO_u8GetPinVaIue+0x2c>
 2e2:	18 f0       	brcs	.+6      	; 0x2ea <DIO_u8GetPinVaIue+0x14>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	c9 f0       	breq	.+50     	; 0x31a <DIO_u8GetPinVaIue+0x44>
 2e8:	28 c0       	rjmp	.+80     	; 0x33a <DIO_u8GetPinVaIue+0x64>
			{
				case DIO_u8PORTA : *(Copy_pu8Value) = GET_BIT( DIO_PINA_REG , Copy_u8Pin ); break;
 2ea:	89 b3       	in	r24, 0x19	; 25
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_u8GetPinVaIue+0x1e>
 2f0:	95 95       	asr	r25
 2f2:	87 95       	ror	r24
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_u8GetPinVaIue+0x1a>
 2f8:	81 70       	andi	r24, 0x01	; 1
 2fa:	fa 01       	movw	r30, r20
 2fc:	80 83       	st	Z, r24
	return Local_u8ErrorState ;
}

u8 DIO_u8GetPinVaIue (u8 Copy_u8Port,u8 Copy_u8Pin, u8 *Copy_pu8Value )
{
	u8 Local_u8ErrorState = OK ;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
	{
		if( DIO_u8PIN7 >= Copy_u8Pin )
		{
			switch ( Copy_u8Port )
			{
				case DIO_u8PORTA : *(Copy_pu8Value) = GET_BIT( DIO_PINA_REG , Copy_u8Pin ); break;
 300:	08 95       	ret
				case DIO_u8PORTB : *(Copy_pu8Value) = GET_BIT( DIO_PINB_REG , Copy_u8Pin ); break;
 302:	86 b3       	in	r24, 0x16	; 22
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_u8GetPinVaIue+0x36>
 308:	95 95       	asr	r25
 30a:	87 95       	ror	r24
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_u8GetPinVaIue+0x32>
 310:	81 70       	andi	r24, 0x01	; 1
 312:	fa 01       	movw	r30, r20
 314:	80 83       	st	Z, r24
	return Local_u8ErrorState ;
}

u8 DIO_u8GetPinVaIue (u8 Copy_u8Port,u8 Copy_u8Pin, u8 *Copy_pu8Value )
{
	u8 Local_u8ErrorState = OK ;
 316:	80 e0       	ldi	r24, 0x00	; 0
		if( DIO_u8PIN7 >= Copy_u8Pin )
		{
			switch ( Copy_u8Port )
			{
				case DIO_u8PORTA : *(Copy_pu8Value) = GET_BIT( DIO_PINA_REG , Copy_u8Pin ); break;
				case DIO_u8PORTB : *(Copy_pu8Value) = GET_BIT( DIO_PINB_REG , Copy_u8Pin ); break;
 318:	08 95       	ret
				case DIO_u8PORTC : *(Copy_pu8Value) = GET_BIT( DIO_PINC_REG , Copy_u8Pin ); break;
 31a:	83 b3       	in	r24, 0x13	; 19
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_u8GetPinVaIue+0x4e>
 320:	95 95       	asr	r25
 322:	87 95       	ror	r24
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_u8GetPinVaIue+0x4a>
 328:	81 70       	andi	r24, 0x01	; 1
 32a:	fa 01       	movw	r30, r20
 32c:	80 83       	st	Z, r24
	return Local_u8ErrorState ;
}

u8 DIO_u8GetPinVaIue (u8 Copy_u8Port,u8 Copy_u8Pin, u8 *Copy_pu8Value )
{
	u8 Local_u8ErrorState = OK ;
 32e:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch ( Copy_u8Port )
			{
				case DIO_u8PORTA : *(Copy_pu8Value) = GET_BIT( DIO_PINA_REG , Copy_u8Pin ); break;
				case DIO_u8PORTB : *(Copy_pu8Value) = GET_BIT( DIO_PINB_REG , Copy_u8Pin ); break;
				case DIO_u8PORTC : *(Copy_pu8Value) = GET_BIT( DIO_PINC_REG , Copy_u8Pin ); break;
 330:	08 95       	ret
			Local_u8ErrorState = NOK ;
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	08 95       	ret
				default: Local_u8ErrorState = NOK ; break;
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	08 95       	ret
			{
				case DIO_u8PORTA : *(Copy_pu8Value) = GET_BIT( DIO_PINA_REG , Copy_u8Pin ); break;
				case DIO_u8PORTB : *(Copy_pu8Value) = GET_BIT( DIO_PINB_REG , Copy_u8Pin ); break;
				case DIO_u8PORTC : *(Copy_pu8Value) = GET_BIT( DIO_PINC_REG , Copy_u8Pin ); break;
				//case DIO_u8PORTD : *(Copy_pu8Value) = GET_BIT( DIO_PIND_REG , Copy_u8Pin ); break;
				default: Local_u8ErrorState = NOK ; break;
 33a:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState = NOK ;
	}
	
	return Local_u8ErrorState ;
}
 33c:	08 95       	ret

0000033e <UART_init>:

void UART_TxChar(u8 Copy_u8Data)
{
	UDR = Copy_u8Data;
	while ( 0 == GET_BIT(UCSRA,5));
}
 33e:	87 e6       	ldi	r24, 0x67	; 103
 340:	89 b9       	out	0x09, r24	; 9
 342:	86 e8       	ldi	r24, 0x86	; 134
 344:	80 bd       	out	0x20, r24	; 32
 346:	8a b1       	in	r24, 0x0a	; 10
 348:	8b 7f       	andi	r24, 0xFB	; 251
 34a:	8a b9       	out	0x0a, r24	; 10
 34c:	8a b1       	in	r24, 0x0a	; 10
 34e:	88 60       	ori	r24, 0x08	; 8
 350:	8a b9       	out	0x0a, r24	; 10
 352:	8a b1       	in	r24, 0x0a	; 10
 354:	80 61       	ori	r24, 0x10	; 16
 356:	8a b9       	out	0x0a, r24	; 10
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 36c:	08 95       	ret

0000036e <UART_RxChar>:


u8 UART_RxChar(void)
{

		while ( 0 == GET_BIT(UCSRA,7));
 36e:	5f 9b       	sbis	0x0b, 7	; 11
 370:	fe cf       	rjmp	.-4      	; 0x36e <UART_RxChar>
		return UDR;
 372:	8c b1       	in	r24, 0x0c	; 12
	
 374:	08 95       	ret

00000376 <ADC_init>:


void ADC_init(void)
{
	// Select Vref = AVCC
	SET_BIT(ADMUX,6);
 376:	87 b1       	in	r24, 0x07	; 7
 378:	80 64       	ori	r24, 0x40	; 64
 37a:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);
 37c:	87 b1       	in	r24, 0x07	; 7
 37e:	8f 77       	andi	r24, 0x7F	; 127
 380:	87 b9       	out	0x07, r24	; 7
	
	// Select Right Adjustment
	CLR_BIT(ADMUX,5);
 382:	87 b1       	in	r24, 0x07	; 7
 384:	8f 7d       	andi	r24, 0xDF	; 223
 386:	87 b9       	out	0x07, r24	; 7
	
	// Single Conversation Mode
	CLR_BIT(ADCSRA,5);
 388:	86 b1       	in	r24, 0x06	; 6
 38a:	8f 7d       	andi	r24, 0xDF	; 223
 38c:	86 b9       	out	0x06, r24	; 6
	
	// Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA,0);
 38e:	86 b1       	in	r24, 0x06	; 6
 390:	81 60       	ori	r24, 0x01	; 1
 392:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);
 394:	86 b1       	in	r24, 0x06	; 6
 396:	82 60       	ori	r24, 0x02	; 2
 398:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
 39a:	86 b1       	in	r24, 0x06	; 6
 39c:	84 60       	ori	r24, 0x04	; 4
 39e:	86 b9       	out	0x06, r24	; 6
	
	// ADC Enable
	SET_BIT(ADCSRA,7);
 3a0:	86 b1       	in	r24, 0x06	; 6
 3a2:	80 68       	ori	r24, 0x80	; 128
 3a4:	86 b9       	out	0x06, r24	; 6
 3a6:	08 95       	ret

000003a8 <ADC_getDigitalValue>:
}


void ADC_getDigitalValue(u8 channelNum,u16* digitalValue)
{
	if((channelNum<32) && (digitalValue != 0))
 3a8:	80 32       	cpi	r24, 0x20	; 32
 3aa:	b0 f4       	brcc	.+44     	; 0x3d8 <ADC_getDigitalValue+0x30>
 3ac:	61 15       	cp	r22, r1
 3ae:	71 05       	cpc	r23, r1
 3b0:	99 f0       	breq	.+38     	; 0x3d8 <ADC_getDigitalValue+0x30>
	{
	    //Clear ADMUX Channel Bits
		ADMUX &= 0b11100000;
 3b2:	97 b1       	in	r25, 0x07	; 7
 3b4:	90 7e       	andi	r25, 0xE0	; 224
 3b6:	97 b9       	out	0x07, r25	; 7

		// Select Channel Number
		ADMUX |= channelNum;
 3b8:	97 b1       	in	r25, 0x07	; 7
 3ba:	89 2b       	or	r24, r25
 3bc:	87 b9       	out	0x07, r24	; 7
	
	    // Start Conversition
		SET_BIT(ADCSRA,6);
 3be:	86 b1       	in	r24, 0x06	; 6
 3c0:	80 64       	ori	r24, 0x40	; 64
 3c2:	86 b9       	out	0x06, r24	; 6
		
		// Wait For The Flag Of ADC
		while(0 == GET_BIT(ADCSRA,4));
 3c4:	34 9b       	sbis	0x06, 4	; 6
 3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <ADC_getDigitalValue+0x1c>
		
		// Clear Flag
		SET_BIT(ADCSRA,4);
 3c8:	86 b1       	in	r24, 0x06	; 6
 3ca:	80 61       	ori	r24, 0x10	; 16
 3cc:	86 b9       	out	0x06, r24	; 6
		
		// Read Digital Value
		*digitalValue = ADC_u16;
 3ce:	84 b1       	in	r24, 0x04	; 4
 3d0:	95 b1       	in	r25, 0x05	; 5
 3d2:	fb 01       	movw	r30, r22
 3d4:	91 83       	std	Z+1, r25	; 0x01
 3d6:	80 83       	st	Z, r24
 3d8:	08 95       	ret

000003da <CLCD_u8SendCommand>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	cf 93       	push	r28
 3dc:	c8 2f       	mov	r28, r24
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 3f2:	6c 2f       	mov	r22, r28
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_u8SetPortVa1ue>
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 404:	89 ef       	ldi	r24, 0xF9	; 249
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <CLCD_voidInit>:
 420:	8f e0       	ldi	r24, 0x0F	; 15
 422:	97 e2       	ldi	r25, 0x27	; 39
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <CLCD_voidInit+0x4>
 428:	00 c0       	rjmp	.+0      	; 0x42a <CLCD_voidInit+0xa>
 42a:	00 00       	nop
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	62 e0       	ldi	r22, 0x02	; 2
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 45e:	41 e0       	ldi	r20, 0x01	; 1
 460:	62 e0       	ldi	r22, 0x02	; 2
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	64 e0       	ldi	r22, 0x04	; 4
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 47c:	41 e0       	ldi	r20, 0x01	; 1
 47e:	65 e0       	ldi	r22, 0x05	; 5
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 486:	41 e0       	ldi	r20, 0x01	; 1
 488:	66 e0       	ldi	r22, 0x06	; 6
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	67 e0       	ldi	r22, 0x07	; 7
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 49a:	88 e3       	ldi	r24, 0x38	; 56
 49c:	0e 94 ed 01 	call	0x3da	; 0x3da <CLCD_u8SendCommand>
 4a0:	8c e0       	ldi	r24, 0x0C	; 12
 4a2:	0e 94 ed 01 	call	0x3da	; 0x3da <CLCD_u8SendCommand>
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 ed 01 	call	0x3da	; 0x3da <CLCD_u8SendCommand>
 4ac:	08 95       	ret

000004ae <CLCD_u8SendChar>:
 4ae:	cf 93       	push	r28
 4b0:	c8 2f       	mov	r28, r24
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 4bc:	40 e0       	ldi	r20, 0x00	; 0
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 4c6:	6c 2f       	mov	r22, r28
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_u8SetPortVa1ue>
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	62 e0       	ldi	r22, 0x02	; 2
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 4d8:	83 ef       	ldi	r24, 0xF3	; 243
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <CLCD_u8SendChar+0x2e>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <CLCD_u8SendChar+0x34>
 4e2:	00 00       	nop
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	62 e0       	ldi	r22, 0x02	; 2
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <CLCD_u8SendString>:
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	8c 01       	movw	r16, r24
 4fc:	c0 e0       	ldi	r28, 0x00	; 0
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <CLCD_u8SendString+0x12>
 500:	0e 94 57 02 	call	0x4ae	; 0x4ae <CLCD_u8SendChar>
 504:	cf 5f       	subi	r28, 0xFF	; 255
 506:	f8 01       	movw	r30, r16
 508:	ec 0f       	add	r30, r28
 50a:	f1 1d       	adc	r31, r1
 50c:	80 81       	ld	r24, Z
 50e:	81 11       	cpse	r24, r1
 510:	f7 cf       	rjmp	.-18     	; 0x500 <CLCD_u8SendString+0xc>
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	08 95       	ret

0000051a <CLCD_voidGoToXY>:
 51a:	88 23       	and	r24, r24
 51c:	29 f0       	breq	.+10     	; 0x528 <CLCD_voidGoToXY+0xe>
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	21 f4       	brne	.+8      	; 0x52a <CLCD_voidGoToXY+0x10>
 522:	90 e4       	ldi	r25, 0x40	; 64
 524:	96 0f       	add	r25, r22
 526:	01 c0       	rjmp	.+2      	; 0x52a <CLCD_voidGoToXY+0x10>
 528:	96 2f       	mov	r25, r22
 52a:	80 e8       	ldi	r24, 0x80	; 128
 52c:	89 0f       	add	r24, r25
 52e:	0e 94 ed 01 	call	0x3da	; 0x3da <CLCD_u8SendCommand>
 532:	08 95       	ret

00000534 <CLCD_voidClear>:
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 ed 01 	call	0x3da	; 0x3da <CLCD_u8SendCommand>
 53a:	83 ef       	ldi	r24, 0xF3	; 243
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <CLCD_voidClear+0xa>
 542:	00 c0       	rjmp	.+0      	; 0x544 <CLCD_voidClear+0x10>
 544:	00 00       	nop
 546:	08 95       	ret

00000548 <CLCD_voidWriteNumber>:
		_delay_ms(10);
	}
}

void CLCD_voidWriteNumber(u32 number)
{
 548:	cf 92       	push	r12
 54a:	df 92       	push	r13
 54c:	ef 92       	push	r14
 54e:	ff 92       	push	r15
 550:	0f 93       	push	r16
 552:	1f 93       	push	r17
 554:	8b 01       	movw	r16, r22
 556:	9c 01       	movw	r18, r24
	u32 Local_reversed = 1;
	if (number == 0)
 558:	67 2b       	or	r22, r23
 55a:	68 2b       	or	r22, r24
 55c:	69 2b       	or	r22, r25
 55e:	49 f5       	brne	.+82     	; 0x5b2 <CLCD_voidWriteNumber+0x6a>
	{
		CLCD_u8SendChar('0');
 560:	80 e3       	ldi	r24, 0x30	; 48
 562:	0e 94 57 02 	call	0x4ae	; 0x4ae <CLCD_u8SendChar>
 566:	45 c0       	rjmp	.+138    	; 0x5f2 <CLCD_voidWriteNumber+0xaa>
	else
	{
		// Reverse Number
		while (number != 0)
		{
			Local_reversed = Local_reversed*10 + (number%10);
 568:	dc 01       	movw	r26, r24
 56a:	cb 01       	movw	r24, r22
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	aa 1f       	adc	r26, r26
 572:	bb 1f       	adc	r27, r27
 574:	6c 01       	movw	r12, r24
 576:	7d 01       	movw	r14, r26
 578:	cc 0c       	add	r12, r12
 57a:	dd 1c       	adc	r13, r13
 57c:	ee 1c       	adc	r14, r14
 57e:	ff 1c       	adc	r15, r15
 580:	cc 0c       	add	r12, r12
 582:	dd 1c       	adc	r13, r13
 584:	ee 1c       	adc	r14, r14
 586:	ff 1c       	adc	r15, r15
 588:	c8 0e       	add	r12, r24
 58a:	d9 1e       	adc	r13, r25
 58c:	ea 1e       	adc	r14, r26
 58e:	fb 1e       	adc	r15, r27
 590:	c9 01       	movw	r24, r18
 592:	b8 01       	movw	r22, r16
 594:	2a e0       	ldi	r18, 0x0A	; 10
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	40 e0       	ldi	r20, 0x00	; 0
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	0e 94 b3 03 	call	0x766	; 0x766 <__udivmodsi4>
 5a0:	6c 0d       	add	r22, r12
 5a2:	7d 1d       	adc	r23, r13
 5a4:	8e 1d       	adc	r24, r14
 5a6:	9f 1d       	adc	r25, r15
			number /= 10;
 5a8:	02 2f       	mov	r16, r18
 5aa:	13 2f       	mov	r17, r19
 5ac:	24 2f       	mov	r18, r20
 5ae:	35 2f       	mov	r19, r21
 5b0:	04 c0       	rjmp	.+8      	; 0x5ba <CLCD_voidWriteNumber+0x72>
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	90 e0       	ldi	r25, 0x00	; 0
		CLCD_u8SendChar('0');
	}
	else
	{
		// Reverse Number
		while (number != 0)
 5ba:	01 15       	cp	r16, r1
 5bc:	11 05       	cpc	r17, r1
 5be:	21 05       	cpc	r18, r1
 5c0:	31 05       	cpc	r19, r1
 5c2:	91 f6       	brne	.-92     	; 0x568 <CLCD_voidWriteNumber+0x20>
			number /= 10;
		}
		
		do
		{
			CLCD_u8SendChar((Local_reversed%10)+'0');
 5c4:	2a e0       	ldi	r18, 0x0A	; 10
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	0e 94 b3 03 	call	0x766	; 0x766 <__udivmodsi4>
 5d0:	e2 2e       	mov	r14, r18
 5d2:	f3 2e       	mov	r15, r19
 5d4:	04 2f       	mov	r16, r20
 5d6:	15 2f       	mov	r17, r21
 5d8:	80 e3       	ldi	r24, 0x30	; 48
 5da:	86 0f       	add	r24, r22
 5dc:	0e 94 57 02 	call	0x4ae	; 0x4ae <CLCD_u8SendChar>
			Local_reversed /= 10;
 5e0:	6e 2d       	mov	r22, r14
 5e2:	7f 2d       	mov	r23, r15
 5e4:	80 2f       	mov	r24, r16
 5e6:	91 2f       	mov	r25, r17
		}while (Local_reversed != 1);
 5e8:	61 30       	cpi	r22, 0x01	; 1
 5ea:	71 05       	cpc	r23, r1
 5ec:	81 05       	cpc	r24, r1
 5ee:	91 05       	cpc	r25, r1
 5f0:	49 f7       	brne	.-46     	; 0x5c4 <CLCD_voidWriteNumber+0x7c>
	}
}
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	ff 90       	pop	r15
 5f8:	ef 90       	pop	r14
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
 5fe:	08 95       	ret

00000600 <main>:
	#include "2-HAL/2-LED/LED_interface.h"
	


	int main(void)
	{
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	00 d0       	rcall	.+0      	; 0x606 <main+0x6>
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
		//	    DECLERATION OF VARIABLES
		u8 receive_comnd ;
		u8 value = 0 ;
 60a:	19 82       	std	Y+1, r1	; 0x01
		u8 temp_value =  0 ;
		u8 check_room_sw =0 ;
 60c:	1a 82       	std	Y+2, r1	; 0x02
		
		//		CALL FUNCTION
		UART_init();
 60e:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_init>
		CLCD_voidInit();
 612:	0e 94 10 02 	call	0x420	; 0x420 <CLCD_voidInit>
		DIO_u8SetPinDirection( DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PIN_OUTPUT);
 616:	41 e0       	ldi	r20, 0x01	; 1
 618:	62 e0       	ldi	r22, 0x02	; 2
 61a:	83 e0       	ldi	r24, 0x03	; 3
 61c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
		
		
		//   ADC
		DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_INPUT);
 620:	40 e0       	ldi	r20, 0x00	; 0
 622:	65 e0       	ldi	r22, 0x05	; 5
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
		ADC_init();
 62a:	0e 94 bb 01 	call	0x376	; 0x376 <ADC_init>
		
		
		//	   DC MOTOR
		DIO_u8SetPinDirection(DIO_u8PORTD , DIO_u8PIN7 , DIO_u8PIN_OUTPUT);
 62e:	41 e0       	ldi	r20, 0x01	; 1
 630:	67 e0       	ldi	r22, 0x07	; 7
 632:	83 e0       	ldi	r24, 0x03	; 3
 634:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
		
		
		//     SET DIRECTION OF PIN & PULL UP
		DIO_u8SetPinDirection( DIO_u8PORTB , DIO_u8PIN0 , DIO_u8PIN_INPUT);
 638:	40 e0       	ldi	r20, 0x00	; 0
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
		DIO_u8SetPinVa1ue( DIO_u8PORTB , DIO_u8PIN0 , DIO_u8PIN_HIGH);
 642:	41 e0       	ldi	r20, 0x01	; 1
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
		
		/* Replace with your application code */
		while (1)
		{
			
			ADC_getDigitalValue(ADC_CHANNEL_5,&value);
 64c:	be 01       	movw	r22, r28
 64e:	6f 5f       	subi	r22, 0xFF	; 255
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	85 e0       	ldi	r24, 0x05	; 5
 654:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <ADC_getDigitalValue>
			temp_value=(u32)(value*500)/(1023);
 658:	29 81       	ldd	r18, Y+1	; 0x01
 65a:	84 ef       	ldi	r24, 0xF4	; 244
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	28 9f       	mul	r18, r24
 660:	b0 01       	movw	r22, r0
 662:	29 9f       	mul	r18, r25
 664:	70 0d       	add	r23, r0
 666:	11 24       	eor	r1, r1
 668:	07 2e       	mov	r0, r23
 66a:	00 0c       	add	r0, r0
 66c:	88 0b       	sbc	r24, r24
 66e:	99 0b       	sbc	r25, r25
 670:	2f ef       	ldi	r18, 0xFF	; 255
 672:	33 e0       	ldi	r19, 0x03	; 3
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	0e 94 b3 03 	call	0x766	; 0x766 <__udivmodsi4>
 67c:	69 01       	movw	r12, r18
 67e:	7a 01       	movw	r14, r20
 680:	12 2f       	mov	r17, r18
			
			//     CHECH ROOM SWITCH
			DIO_u8GetPinVaIue( DIO_u8PORTB , DIO_u8PIN0 , &check_room_sw );
 682:	ae 01       	movw	r20, r28
 684:	4e 5f       	subi	r20, 0xFE	; 254
 686:	5f 4f       	sbci	r21, 0xFF	; 255
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_u8GetPinVaIue>
			
			if ( temp_value >= 30 )
 690:	1e 31       	cpi	r17, 0x1E	; 30
 692:	c8 f0       	brcs	.+50     	; 0x6c6 <main+0xc6>
			{
				//   motor on
				DIO_u8SetPinVa1ue(DIO_u8PORTD , DIO_u8PIN7 , DIO_u8PIN_HIGH);
 694:	41 e0       	ldi	r20, 0x01	; 1
 696:	67 e0       	ldi	r22, 0x07	; 7
 698:	83 e0       	ldi	r24, 0x03	; 3
 69a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
				//-----------
				CLCD_voidGoToXY(1,0);
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
				CLCD_u8SendString("Temp= ");
 6a6:	80 e6       	ldi	r24, 0x60	; 96
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <CLCD_u8SendString>
				CLCD_voidWriteNumber((temp_value));
 6ae:	c7 01       	movw	r24, r14
 6b0:	b6 01       	movw	r22, r12
 6b2:	77 27       	eor	r23, r23
 6b4:	88 27       	eor	r24, r24
 6b6:	99 27       	eor	r25, r25
 6b8:	0e 94 a4 02 	call	0x548	; 0x548 <CLCD_voidWriteNumber>
				CLCD_u8SendString(" C");
 6bc:	87 e6       	ldi	r24, 0x67	; 103
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <CLCD_u8SendString>
 6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <main+0xd4>
			}
			else
			{
				CLCD_voidClear();
 6c6:	0e 94 9a 02 	call	0x534	; 0x534 <CLCD_voidClear>
				// motor off
				DIO_u8SetPinVa1ue(DIO_u8PORTD , DIO_u8PIN7 , DIO_u8PIN_LOW);
 6ca:	40 e0       	ldi	r20, 0x00	; 0
 6cc:	67 e0       	ldi	r22, 0x07	; 7
 6ce:	83 e0       	ldi	r24, 0x03	; 3
 6d0:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
			}
			
			
			receive_comnd = UART_RxChar() ;
 6d4:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
	
			if(GET_BIT(receive_comnd,2))
 6d8:	82 ff       	sbrs	r24, 2
 6da:	2f c0       	rjmp	.+94     	; 0x73a <main+0x13a>
			{
				if ( 0 == check_room_sw )
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	81 11       	cpse	r24, r1
 6e0:	16 c0       	rjmp	.+44     	; 0x70e <main+0x10e>
				{
					DIO_u8SetPinVa1ue( DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PIN_HIGH );
 6e2:	41 e0       	ldi	r20, 0x01	; 1
 6e4:	62 e0       	ldi	r22, 0x02	; 2
 6e6:	83 e0       	ldi	r24, 0x03	; 3
 6e8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
					CLCD_voidGoToXY(0,0);
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
					CLCD_u8SendString("Led On :)");
 6f4:	8a e6       	ldi	r24, 0x6A	; 106
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <CLCD_u8SendString>
 6fc:	8f e4       	ldi	r24, 0x4F	; 79
 6fe:	93 ec       	ldi	r25, 0xC3	; 195
 700:	01 97       	sbiw	r24, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <main+0x100>
 704:	00 c0       	rjmp	.+0      	; 0x706 <main+0x106>
 706:	00 00       	nop
					_delay_ms(200);
					CLCD_voidClear();
 708:	0e 94 9a 02 	call	0x534	; 0x534 <CLCD_voidClear>
 70c:	9f cf       	rjmp	.-194    	; 0x64c <main+0x4c>
				}
				else
				{
					DIO_u8SetPinVa1ue( DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PIN_LOW );
 70e:	40 e0       	ldi	r20, 0x00	; 0
 710:	62 e0       	ldi	r22, 0x02	; 2
 712:	83 e0       	ldi	r24, 0x03	; 3
 714:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
					CLCD_voidGoToXY(0,0);
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
					CLCD_u8SendString("Led Off :(");
 720:	84 e7       	ldi	r24, 0x74	; 116
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <CLCD_u8SendString>
 728:	8f e4       	ldi	r24, 0x4F	; 79
 72a:	93 ec       	ldi	r25, 0xC3	; 195
 72c:	01 97       	sbiw	r24, 0x01	; 1
 72e:	f1 f7       	brne	.-4      	; 0x72c <main+0x12c>
 730:	00 c0       	rjmp	.+0      	; 0x732 <main+0x132>
 732:	00 00       	nop
					_delay_ms(200);
					CLCD_voidClear();
 734:	0e 94 9a 02 	call	0x534	; 0x534 <CLCD_voidClear>
 738:	89 cf       	rjmp	.-238    	; 0x64c <main+0x4c>
				}
				
			}
			else
			{
				DIO_u8SetPinVa1ue( DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PIN_LOW );
 73a:	40 e0       	ldi	r20, 0x00	; 0
 73c:	62 e0       	ldi	r22, 0x02	; 2
 73e:	83 e0       	ldi	r24, 0x03	; 3
 740:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
				CLCD_voidGoToXY(0,0);
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>
				CLCD_u8SendString("Led Off :(");
 74c:	84 e7       	ldi	r24, 0x74	; 116
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <CLCD_u8SendString>
 754:	8f e4       	ldi	r24, 0x4F	; 79
 756:	93 ec       	ldi	r25, 0xC3	; 195
 758:	01 97       	sbiw	r24, 0x01	; 1
 75a:	f1 f7       	brne	.-4      	; 0x758 <main+0x158>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <main+0x15e>
 75e:	00 00       	nop
				_delay_ms(200);
				CLCD_voidClear();
 760:	0e 94 9a 02 	call	0x534	; 0x534 <CLCD_voidClear>
 764:	73 cf       	rjmp	.-282    	; 0x64c <main+0x4c>

00000766 <__udivmodsi4>:
 766:	a1 e2       	ldi	r26, 0x21	; 33
 768:	1a 2e       	mov	r1, r26
 76a:	aa 1b       	sub	r26, r26
 76c:	bb 1b       	sub	r27, r27
 76e:	fd 01       	movw	r30, r26
 770:	0d c0       	rjmp	.+26     	; 0x78c <__udivmodsi4_ep>

00000772 <__udivmodsi4_loop>:
 772:	aa 1f       	adc	r26, r26
 774:	bb 1f       	adc	r27, r27
 776:	ee 1f       	adc	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	a2 17       	cp	r26, r18
 77c:	b3 07       	cpc	r27, r19
 77e:	e4 07       	cpc	r30, r20
 780:	f5 07       	cpc	r31, r21
 782:	20 f0       	brcs	.+8      	; 0x78c <__udivmodsi4_ep>
 784:	a2 1b       	sub	r26, r18
 786:	b3 0b       	sbc	r27, r19
 788:	e4 0b       	sbc	r30, r20
 78a:	f5 0b       	sbc	r31, r21

0000078c <__udivmodsi4_ep>:
 78c:	66 1f       	adc	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	1a 94       	dec	r1
 796:	69 f7       	brne	.-38     	; 0x772 <__udivmodsi4_loop>
 798:	60 95       	com	r22
 79a:	70 95       	com	r23
 79c:	80 95       	com	r24
 79e:	90 95       	com	r25
 7a0:	9b 01       	movw	r18, r22
 7a2:	ac 01       	movw	r20, r24
 7a4:	bd 01       	movw	r22, r26
 7a6:	cf 01       	movw	r24, r30
 7a8:	08 95       	ret

000007aa <_exit>:
 7aa:	f8 94       	cli

000007ac <__stop_program>:
 7ac:	ff cf       	rjmp	.-2      	; 0x7ac <__stop_program>

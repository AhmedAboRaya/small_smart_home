
SmartHomeProject_ABORAYA2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000848  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00000848  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001adb  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a57  00000000  00000000  000025d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001014  00000000  00000000  0000302a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002cc  00000000  00000000  00004040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000075f  00000000  00000000  0000430c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010e2  00000000  00000000  00004a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00005b4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4f 03 	call	0x69e	; 0x69e <main>
  7a:	0c 94 22 04 	jmp	0x844	; 0x844 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_u8SetPinDirection>:
	{
		Local_u8ErrorState = NOK ;
	}
	
	return Local_u8ErrorState ;
}
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinDirection+0x6>
  86:	7b c0       	rjmp	.+246    	; 0x17e <DIO_u8SetPinDirection+0xfc>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_u8SetPinDirection+0xc>
  8c:	7a c0       	rjmp	.+244    	; 0x182 <DIO_u8SetPinDirection+0x100>
  8e:	41 11       	cpse	r20, r1
  90:	3c c0       	rjmp	.+120    	; 0x10a <DIO_u8SetPinDirection+0x88>
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	99 f0       	breq	.+38     	; 0xbc <DIO_u8SetPinDirection+0x3a>
  96:	28 f0       	brcs	.+10     	; 0xa2 <DIO_u8SetPinDirection+0x20>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	e9 f0       	breq	.+58     	; 0xd6 <DIO_u8SetPinDirection+0x54>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	41 f1       	breq	.+80     	; 0xf0 <DIO_u8SetPinDirection+0x6e>
  a0:	72 c0       	rjmp	.+228    	; 0x186 <DIO_u8SetPinDirection+0x104>
  a2:	2a b3       	in	r18, 0x1a	; 26
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_u8SetPinDirection+0x2c>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_u8SetPinDirection+0x28>
  b2:	80 95       	com	r24
  b4:	82 23       	and	r24, r18
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	08 95       	ret
  bc:	27 b3       	in	r18, 0x17	; 23
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_u8SetPinDirection+0x46>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_u8SetPinDirection+0x42>
  cc:	80 95       	com	r24
  ce:	82 23       	and	r24, r18
  d0:	87 bb       	out	0x17, r24	; 23
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret
  d6:	24 b3       	in	r18, 0x14	; 20
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_u8SetPinDirection+0x60>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_u8SetPinDirection+0x5c>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	21 b3       	in	r18, 0x11	; 17
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_u8SetPinDirection+0x7a>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_u8SetPinDirection+0x76>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	81 bb       	out	0x11, r24	; 17
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	f1 f5       	brne	.+124    	; 0x18a <DIO_u8SetPinDirection+0x108>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 f0       	breq	.+36     	; 0x136 <DIO_u8SetPinDirection+0xb4>
 112:	28 f0       	brcs	.+10     	; 0x11e <DIO_u8SetPinDirection+0x9c>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	d9 f0       	breq	.+54     	; 0x14e <DIO_u8SetPinDirection+0xcc>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	29 f1       	breq	.+74     	; 0x166 <DIO_u8SetPinDirection+0xe4>
 11c:	38 c0       	rjmp	.+112    	; 0x18e <DIO_u8SetPinDirection+0x10c>
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_u8SetPinDirection+0xa8>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_u8SetPinDirection+0xa4>
 12e:	82 2b       	or	r24, r18
 130:	8a bb       	out	0x1a, r24	; 26
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
 136:	27 b3       	in	r18, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_u8SetPinDirection+0xc0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_u8SetPinDirection+0xbc>
 146:	82 2b       	or	r24, r18
 148:	87 bb       	out	0x17, r24	; 23
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinDirection+0xd8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinDirection+0xd4>
 15e:	82 2b       	or	r24, r18
 160:	84 bb       	out	0x14, r24	; 20
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_u8SetPinDirection+0xf0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_u8SetPinDirection+0xec>
 176:	82 2b       	or	r24, r18
 178:	81 bb       	out	0x11, r24	; 17
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 95       	ret
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	08 95       	ret
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	08 95       	ret
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret

00000192 <DIO_u8SetPinVa1ue>:

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
	
	if( DIO_u8PORTD >= Copy_u8Port )
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	08 f0       	brcs	.+2      	; 0x198 <DIO_u8SetPinVa1ue+0x6>
 196:	7b c0       	rjmp	.+246    	; 0x28e <DIO_u8SetPinVa1ue+0xfc>
	{
		if( DIO_u8PIN7 >= Copy_u8Pin )
 198:	68 30       	cpi	r22, 0x08	; 8
 19a:	08 f0       	brcs	.+2      	; 0x19e <DIO_u8SetPinVa1ue+0xc>
 19c:	7a c0       	rjmp	.+244    	; 0x292 <DIO_u8SetPinVa1ue+0x100>
		{
			if ( DIO_u8PIN_HIGH == Copy_u8Va1ue )
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	c1 f5       	brne	.+112    	; 0x212 <DIO_u8SetPinVa1ue+0x80>
			{
				switch ( Copy_u8Port )
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 f0       	breq	.+36     	; 0x1ca <DIO_u8SetPinVa1ue+0x38>
 1a6:	28 f0       	brcs	.+10     	; 0x1b2 <DIO_u8SetPinVa1ue+0x20>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	d9 f0       	breq	.+54     	; 0x1e2 <DIO_u8SetPinVa1ue+0x50>
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	29 f1       	breq	.+74     	; 0x1fa <DIO_u8SetPinVa1ue+0x68>
 1b0:	72 c0       	rjmp	.+228    	; 0x296 <DIO_u8SetPinVa1ue+0x104>
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
 1b2:	2b b3       	in	r18, 0x1b	; 27
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_u8SetPinVa1ue+0x2c>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_u8SetPinVa1ue+0x28>
 1c2:	82 2b       	or	r24, r18
 1c4:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
		{
			if ( DIO_u8PIN_HIGH == Copy_u8Va1ue )
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
 1c8:	08 95       	ret
					case DIO_u8PORTB : SET_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_u8SetPinVa1ue+0x44>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_u8SetPinVa1ue+0x40>
 1da:	82 2b       	or	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 1de:	80 e0       	ldi	r24, 0x00	; 0
			if ( DIO_u8PIN_HIGH == Copy_u8Va1ue )
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : SET_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
 1e0:	08 95       	ret
					case DIO_u8PORTC : SET_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_u8SetPinVa1ue+0x5c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_u8SetPinVa1ue+0x58>
 1f2:	82 2b       	or	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : SET_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : SET_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
 1f8:	08 95       	ret
					case DIO_u8PORTD : SET_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
 1fa:	22 b3       	in	r18, 0x12	; 18
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_u8SetPinVa1ue+0x74>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_u8SetPinVa1ue+0x70>
 20a:	82 2b       	or	r24, r18
 20c:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 20e:	80 e0       	ldi	r24, 0x00	; 0
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : SET_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : SET_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTD : SET_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
 210:	08 95       	ret
					default: Local_u8ErrorState = NOK ; break;
				}
			}
			else if ( DIO_u8PIN_LOW == Copy_u8Va1ue )
 212:	41 11       	cpse	r20, r1
 214:	42 c0       	rjmp	.+132    	; 0x29a <DIO_u8SetPinVa1ue+0x108>
			{
				switch ( Copy_u8Port )
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	99 f0       	breq	.+38     	; 0x240 <DIO_u8SetPinVa1ue+0xae>
 21a:	28 f0       	brcs	.+10     	; 0x226 <DIO_u8SetPinVa1ue+0x94>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	e9 f0       	breq	.+58     	; 0x25a <DIO_u8SetPinVa1ue+0xc8>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	41 f1       	breq	.+80     	; 0x274 <DIO_u8SetPinVa1ue+0xe2>
 224:	3c c0       	rjmp	.+120    	; 0x29e <DIO_u8SetPinVa1ue+0x10c>
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_u8SetPinVa1ue+0xa0>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_u8SetPinVa1ue+0x9c>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 23c:	80 e0       	ldi	r24, 0x00	; 0
			}
			else if ( DIO_u8PIN_LOW == Copy_u8Va1ue )
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
 23e:	08 95       	ret
					case DIO_u8PORTB : CLR_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_u8SetPinVa1ue+0xba>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_u8SetPinVa1ue+0xb6>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 256:	80 e0       	ldi	r24, 0x00	; 0
			else if ( DIO_u8PIN_LOW == Copy_u8Va1ue )
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : CLR_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
 258:	08 95       	ret
					case DIO_u8PORTC : CLR_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
 25a:	25 b3       	in	r18, 0x15	; 21
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_u8SetPinVa1ue+0xd4>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_u8SetPinVa1ue+0xd0>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 270:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : CLR_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : CLR_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
 272:	08 95       	ret
					case DIO_u8PORTD : CLR_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
 274:	22 b3       	in	r18, 0x12	; 18
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_u8SetPinVa1ue+0xee>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_u8SetPinVa1ue+0xea>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPinVa1ue (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Va1ue)
{
	u8 Local_u8ErrorState = OK ;
 28a:	80 e0       	ldi	r24, 0x00	; 0
				switch ( Copy_u8Port )
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : CLR_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : CLR_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTD : CLR_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
 28c:	08 95       	ret
			Local_u8ErrorState = NOK ;
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret
				Local_u8ErrorState = NOK ;
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	08 95       	ret
				{
					case DIO_u8PORTA : SET_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : SET_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : SET_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTD : SET_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
					default: Local_u8ErrorState = NOK ; break;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
					default: Local_u8ErrorState = NOK ; break;
				}
			}
			else
			{
				Local_u8ErrorState = NOK ;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	08 95       	ret
				{
					case DIO_u8PORTA : CLR_BIT( DIO_PORTA_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTB : CLR_BIT( DIO_PORTB_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTC : CLR_BIT( DIO_PORTC_REG , Copy_u8Pin) ; break;
					case DIO_u8PORTD : CLR_BIT( DIO_PORTD_REG , Copy_u8Pin) ; break;
					default: Local_u8ErrorState = NOK ; break;
 29e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErrorState = NOK ;
	}
	return Local_u8ErrorState ;
}
 2a0:	08 95       	ret

000002a2 <DIO_u8SetPortVa1ue>:

u8 DIO_u8SetPortVa1ue (u8 Copy_u8Port, u8 Copy_u8Va1ue) 
{
	u8 Local_u8ErrorState = OK ;
	
	if ( DIO_u8PORTD >= Copy_u8Port )
 2a2:	84 30       	cpi	r24, 0x04	; 4
 2a4:	a0 f4       	brcc	.+40     	; 0x2ce <DIO_u8SetPortVa1ue+0x2c>
	{
		switch ( Copy_u8Port )
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	49 f0       	breq	.+18     	; 0x2bc <DIO_u8SetPortVa1ue+0x1a>
 2aa:	28 f0       	brcs	.+10     	; 0x2b6 <DIO_u8SetPortVa1ue+0x14>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	49 f0       	breq	.+18     	; 0x2c2 <DIO_u8SetPortVa1ue+0x20>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	51 f0       	breq	.+20     	; 0x2c8 <DIO_u8SetPortVa1ue+0x26>
 2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <DIO_u8SetPortVa1ue+0x30>
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
 2b6:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPortVa1ue (u8 Copy_u8Port, u8 Copy_u8Va1ue) 
{
	u8 Local_u8ErrorState = OK ;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
	
	if ( DIO_u8PORTD >= Copy_u8Port )
	{
		switch ( Copy_u8Port )
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
 2ba:	08 95       	ret
			case DIO_u8PORTB : DIO_PORTB_REG = Copy_u8Va1ue ; break;
 2bc:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPortVa1ue (u8 Copy_u8Port, u8 Copy_u8Va1ue) 
{
	u8 Local_u8ErrorState = OK ;
 2be:	80 e0       	ldi	r24, 0x00	; 0
	if ( DIO_u8PORTD >= Copy_u8Port )
	{
		switch ( Copy_u8Port )
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTB : DIO_PORTB_REG = Copy_u8Va1ue ; break;
 2c0:	08 95       	ret
			case DIO_u8PORTC : DIO_PORTC_REG = Copy_u8Va1ue ; break;
 2c2:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPortVa1ue (u8 Copy_u8Port, u8 Copy_u8Va1ue) 
{
	u8 Local_u8ErrorState = OK ;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch ( Copy_u8Port )
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTB : DIO_PORTB_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTC : DIO_PORTC_REG = Copy_u8Va1ue ; break;
 2c6:	08 95       	ret
			case DIO_u8PORTD : DIO_PORTD_REG = Copy_u8Va1ue ; break;
 2c8:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState ;
}

u8 DIO_u8SetPortVa1ue (u8 Copy_u8Port, u8 Copy_u8Va1ue) 
{
	u8 Local_u8ErrorState = OK ;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
		switch ( Copy_u8Port )
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTB : DIO_PORTB_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTC : DIO_PORTC_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTD : DIO_PORTD_REG = Copy_u8Va1ue ; break;
 2cc:	08 95       	ret
			default: Local_u8ErrorState = NOK ;
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	08 95       	ret
		{
			case DIO_u8PORTA : DIO_PORTA_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTB : DIO_PORTB_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTC : DIO_PORTC_REG = Copy_u8Va1ue ; break;
			case DIO_u8PORTD : DIO_PORTD_REG = Copy_u8Va1ue ; break;
			default: Local_u8ErrorState = NOK ;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState = NOK ;
	}
	
	return Local_u8ErrorState ;
}
 2d4:	08 95       	ret

000002d6 <DIO_u8GetPinVaIue>:

u8 DIO_u8GetPinVaIue (u8 Copy_u8Port,u8 Copy_u8Pin, u8 *Copy_pu8Value )
{
	u8 Local_u8ErrorState = OK ;
	
	if( DIO_u8PORTD >= Copy_u8Port )
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	60 f5       	brcc	.+88     	; 0x332 <DIO_u8GetPinVaIue+0x5c>
	{
		if( DIO_u8PIN7 >= Copy_u8Pin )
 2da:	68 30       	cpi	r22, 0x08	; 8
 2dc:	60 f5       	brcc	.+88     	; 0x336 <DIO_u8GetPinVaIue+0x60>
		{
			switch ( Copy_u8Port )
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	81 f0       	breq	.+32     	; 0x302 <DIO_u8GetPinVaIue+0x2c>
 2e2:	18 f0       	brcs	.+6      	; 0x2ea <DIO_u8GetPinVaIue+0x14>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	c9 f0       	breq	.+50     	; 0x31a <DIO_u8GetPinVaIue+0x44>
 2e8:	28 c0       	rjmp	.+80     	; 0x33a <DIO_u8GetPinVaIue+0x64>
			{
				case DIO_u8PORTA : *(Copy_pu8Value) = GET_BIT( DIO_PINA_REG , Copy_u8Pin ); break;
 2ea:	89 b3       	in	r24, 0x19	; 25
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_u8GetPinVaIue+0x1e>
 2f0:	95 95       	asr	r25
 2f2:	87 95       	ror	r24
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_u8GetPinVaIue+0x1a>
 2f8:	81 70       	andi	r24, 0x01	; 1
 2fa:	fa 01       	movw	r30, r20
 2fc:	80 83       	st	Z, r24
	return Local_u8ErrorState ;
}

u8 DIO_u8GetPinVaIue (u8 Copy_u8Port,u8 Copy_u8Pin, u8 *Copy_pu8Value )
{
	u8 Local_u8ErrorState = OK ;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
	{
		if( DIO_u8PIN7 >= Copy_u8Pin )
		{
			switch ( Copy_u8Port )
			{
				case DIO_u8PORTA : *(Copy_pu8Value) = GET_BIT( DIO_PINA_REG , Copy_u8Pin ); break;
 300:	08 95       	ret
				case DIO_u8PORTB : *(Copy_pu8Value) = GET_BIT( DIO_PINB_REG , Copy_u8Pin ); break;
 302:	86 b3       	in	r24, 0x16	; 22
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_u8GetPinVaIue+0x36>
 308:	95 95       	asr	r25
 30a:	87 95       	ror	r24
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_u8GetPinVaIue+0x32>
 310:	81 70       	andi	r24, 0x01	; 1
 312:	fa 01       	movw	r30, r20
 314:	80 83       	st	Z, r24
	return Local_u8ErrorState ;
}

u8 DIO_u8GetPinVaIue (u8 Copy_u8Port,u8 Copy_u8Pin, u8 *Copy_pu8Value )
{
	u8 Local_u8ErrorState = OK ;
 316:	80 e0       	ldi	r24, 0x00	; 0
		if( DIO_u8PIN7 >= Copy_u8Pin )
		{
			switch ( Copy_u8Port )
			{
				case DIO_u8PORTA : *(Copy_pu8Value) = GET_BIT( DIO_PINA_REG , Copy_u8Pin ); break;
				case DIO_u8PORTB : *(Copy_pu8Value) = GET_BIT( DIO_PINB_REG , Copy_u8Pin ); break;
 318:	08 95       	ret
				case DIO_u8PORTC : *(Copy_pu8Value) = GET_BIT( DIO_PINC_REG , Copy_u8Pin ); break;
 31a:	83 b3       	in	r24, 0x13	; 19
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_u8GetPinVaIue+0x4e>
 320:	95 95       	asr	r25
 322:	87 95       	ror	r24
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_u8GetPinVaIue+0x4a>
 328:	81 70       	andi	r24, 0x01	; 1
 32a:	fa 01       	movw	r30, r20
 32c:	80 83       	st	Z, r24
	return Local_u8ErrorState ;
}

u8 DIO_u8GetPinVaIue (u8 Copy_u8Port,u8 Copy_u8Pin, u8 *Copy_pu8Value )
{
	u8 Local_u8ErrorState = OK ;
 32e:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch ( Copy_u8Port )
			{
				case DIO_u8PORTA : *(Copy_pu8Value) = GET_BIT( DIO_PINA_REG , Copy_u8Pin ); break;
				case DIO_u8PORTB : *(Copy_pu8Value) = GET_BIT( DIO_PINB_REG , Copy_u8Pin ); break;
				case DIO_u8PORTC : *(Copy_pu8Value) = GET_BIT( DIO_PINC_REG , Copy_u8Pin ); break;
 330:	08 95       	ret
			Local_u8ErrorState = NOK ;
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	08 95       	ret
				default: Local_u8ErrorState = NOK ; break;
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	08 95       	ret
			{
				case DIO_u8PORTA : *(Copy_pu8Value) = GET_BIT( DIO_PINA_REG , Copy_u8Pin ); break;
				case DIO_u8PORTB : *(Copy_pu8Value) = GET_BIT( DIO_PINB_REG , Copy_u8Pin ); break;
				case DIO_u8PORTC : *(Copy_pu8Value) = GET_BIT( DIO_PINC_REG , Copy_u8Pin ); break;
				//case DIO_u8PORTD : *(Copy_pu8Value) = GET_BIT( DIO_PIND_REG , Copy_u8Pin ); break;
				default: Local_u8ErrorState = NOK ; break;
 33a:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState = NOK ;
	}
	
	return Local_u8ErrorState ;
}
 33c:	08 95       	ret

0000033e <UART_init>:

void UART_TxChar(u8 Copy_u8Data)
{
	UDR = Copy_u8Data;
	while ( 0 == GET_BIT(UCSRA,5));
}
 33e:	87 e6       	ldi	r24, 0x67	; 103
 340:	89 b9       	out	0x09, r24	; 9
 342:	86 e8       	ldi	r24, 0x86	; 134
 344:	80 bd       	out	0x20, r24	; 32
 346:	8a b1       	in	r24, 0x0a	; 10
 348:	8b 7f       	andi	r24, 0xFB	; 251
 34a:	8a b9       	out	0x0a, r24	; 10
 34c:	8a b1       	in	r24, 0x0a	; 10
 34e:	88 60       	ori	r24, 0x08	; 8
 350:	8a b9       	out	0x0a, r24	; 10
 352:	8a b1       	in	r24, 0x0a	; 10
 354:	80 61       	ori	r24, 0x10	; 16
 356:	8a b9       	out	0x0a, r24	; 10
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 36c:	08 95       	ret

0000036e <UART_RxChar>:


u8 UART_RxChar(void)
{

		while ( 0 == GET_BIT(UCSRA,7));
 36e:	5f 9b       	sbis	0x0b, 7	; 11
 370:	fe cf       	rjmp	.-4      	; 0x36e <UART_RxChar>
		return UDR;
 372:	8c b1       	in	r24, 0x0c	; 12
	
 374:	08 95       	ret

00000376 <TMR1_init>:


void TMR1_init(void)
{
	// Select Mode = Fast PWM Mode(14)
	CLR_BIT(TCCR1A,0);
 376:	8f b5       	in	r24, 0x2f	; 47
 378:	8e 7f       	andi	r24, 0xFE	; 254
 37a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,1);
 37c:	8f b5       	in	r24, 0x2f	; 47
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,3);
 382:	8e b5       	in	r24, 0x2e	; 46
 384:	88 60       	ori	r24, 0x08	; 8
 386:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,4);
 388:	8e b5       	in	r24, 0x2e	; 46
 38a:	80 61       	ori	r24, 0x10	; 16
 38c:	8e bd       	out	0x2e, r24	; 46
	
	// Select Non Inverting Mode
	CLR_BIT(TCCR1A,6);
 38e:	8f b5       	in	r24, 0x2f	; 47
 390:	8f 7b       	andi	r24, 0xBF	; 191
 392:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,7);
 394:	8f b5       	in	r24, 0x2f	; 47
 396:	80 68       	ori	r24, 0x80	; 128
 398:	8f bd       	out	0x2f, r24	; 47
	
	//Set OC1A pin as O/P pin
	SET_BIT(DIO_DDRD_REG,5); 
 39a:	81 b3       	in	r24, 0x11	; 17
 39c:	80 62       	ori	r24, 0x20	; 32
 39e:	81 bb       	out	0x11, r24	; 17
	
	// ICR1 >> period time = 20ms >> freq. = 50HZ
	ICR1_u16 = 4999;
 3a0:	87 e8       	ldi	r24, 0x87	; 135
 3a2:	93 e1       	ldi	r25, 0x13	; 19
 3a4:	97 bd       	out	0x27, r25	; 39
 3a6:	86 bd       	out	0x26, r24	; 38
 3a8:	08 95       	ret

000003aa <TMR1_start>:


void TMR1_start(void)
{
	// Select Prescaler Value = 64
	SET_BIT(TCCR1B,0);
 3aa:	8e b5       	in	r24, 0x2e	; 46
 3ac:	81 60       	ori	r24, 0x01	; 1
 3ae:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,1);
 3b0:	8e b5       	in	r24, 0x2e	; 46
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
 3b6:	8e b5       	in	r24, 0x2e	; 46
 3b8:	8b 7f       	andi	r24, 0xFB	; 251
 3ba:	8e bd       	out	0x2e, r24	; 46
 3bc:	08 95       	ret

000003be <TMR1_setCompareMatchValueA>:


void TMR1_setCompareMatchValueA(u16 value)
{
	// Init Timer With Compare Value (Duty Cycle)
	OCR1A_u16 = value;
 3be:	9b bd       	out	0x2b, r25	; 43
 3c0:	8a bd       	out	0x2a, r24	; 42
 3c2:	08 95       	ret

000003c4 <CLCD_u8SendCommand>:
		/* Location is at second line */
		Local_u8Address = Copy_YPos + 0x40 ;
	}
	
	/* 128 represent 0b10000000 */
	CLCD_u8SendCommand(Local_u8Address + 128);
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 3dc:	6c 2f       	mov	r22, r28
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_u8SetPortVa1ue>
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 3ee:	89 ef       	ldi	r24, 0xF9	; 249
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <CLCD_u8SendCommand+0x2e>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <CLCD_u8SendCommand+0x34>
 3f8:	00 00       	nop
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <CLCD_voidInit>:
 40a:	8f e0       	ldi	r24, 0x0F	; 15
 40c:	97 e2       	ldi	r25, 0x27	; 39
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <CLCD_voidInit+0x4>
 412:	00 c0       	rjmp	.+0      	; 0x414 <CLCD_voidInit+0xa>
 414:	00 00       	nop
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 43e:	41 e0       	ldi	r20, 0x01	; 1
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 448:	41 e0       	ldi	r20, 0x01	; 1
 44a:	62 e0       	ldi	r22, 0x02	; 2
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	63 e0       	ldi	r22, 0x03	; 3
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	64 e0       	ldi	r22, 0x04	; 4
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	65 e0       	ldi	r22, 0x05	; 5
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	66 e0       	ldi	r22, 0x06	; 6
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	67 e0       	ldi	r22, 0x07	; 7
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 484:	88 e3       	ldi	r24, 0x38	; 56
 486:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <CLCD_u8SendCommand>
 48a:	8c e0       	ldi	r24, 0x0C	; 12
 48c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <CLCD_u8SendCommand>
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <CLCD_u8SendCommand>
 496:	08 95       	ret

00000498 <CLCD_u8SendChar>:
 498:	cf 93       	push	r28
 49a:	c8 2f       	mov	r28, r24
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 4b0:	6c 2f       	mov	r22, r28
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_u8SetPortVa1ue>
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	62 e0       	ldi	r22, 0x02	; 2
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 4c2:	83 ef       	ldi	r24, 0xF3	; 243
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <CLCD_u8SendChar+0x2e>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <CLCD_u8SendChar+0x34>
 4cc:	00 00       	nop
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	62 e0       	ldi	r22, 0x02	; 2
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <CLCD_u8SendString>:
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	8c 01       	movw	r16, r24
 4e6:	c0 e0       	ldi	r28, 0x00	; 0
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <CLCD_u8SendString+0x12>
 4ea:	0e 94 4c 02 	call	0x498	; 0x498 <CLCD_u8SendChar>
 4ee:	cf 5f       	subi	r28, 0xFF	; 255
 4f0:	f8 01       	movw	r30, r16
 4f2:	ec 0f       	add	r30, r28
 4f4:	f1 1d       	adc	r31, r1
 4f6:	80 81       	ld	r24, Z
 4f8:	81 11       	cpse	r24, r1
 4fa:	f7 cf       	rjmp	.-18     	; 0x4ea <CLCD_u8SendString+0xc>
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	08 95       	ret

00000504 <CLCD_voidClear>:
}

void CLCD_voidClear(void)
{
	// Clear Display
	CLCD_u8SendCommand(0b00000001);
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <CLCD_u8SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50a:	83 ef       	ldi	r24, 0xF3	; 243
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <CLCD_voidClear+0xa>
 512:	00 c0       	rjmp	.+0      	; 0x514 <CLCD_voidClear+0x10>
 514:	00 00       	nop
 516:	08 95       	ret

00000518 <LED_voidInit>:



void LED_voidInit( u8 Copy_u8Port, u8 Copy_u8Pin )
{
	DIO_u8SetPinDirection(Copy_u8Port , Copy_u8Pin , DIO_u8PIN_OUTPUT);
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 51e:	08 95       	ret

00000520 <LED_voidOn>:
}


void LED_voidOn( u8 Copy_u8Port, u8 Copy_u8Pin , u8 Copy_u8Conn )
{
	if ( SOURCE == Copy_u8Conn )
 520:	41 30       	cpi	r20, 0x01	; 1
 522:	19 f4       	brne	.+6      	; 0x52a <LED_voidOn+0xa>
	{
		DIO_u8SetPinVa1ue( Copy_u8Port , Copy_u8Pin , DIO_u8PIN_HIGH );
 524:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 528:	08 95       	ret
	}else if( SINK == Copy_u8Conn )
 52a:	41 11       	cpse	r20, r1
 52c:	02 c0       	rjmp	.+4      	; 0x532 <LED_voidOn+0x12>
	{
		DIO_u8SetPinVa1ue( Copy_u8Port , Copy_u8Pin , DIO_u8PIN_LOW );
 52e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
 532:	08 95       	ret

00000534 <KPD_init>:
void KPD_init(void)
{
	/*KPD PINS*/
	//ROWS C0-->C3 INPUT PULLED_UP
	//COLOUMNS C4--->C7  OUTPUT HIGH
	DIO_u8SetPinDirection(KPD_u8_PORT,KPD_u8_C0_PIN,DIO_u8PIN_OUTPUT);
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	64 e0       	ldi	r22, 0x04	; 4
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT,KPD_u8_C1_PIN,DIO_u8PIN_OUTPUT);
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	65 e0       	ldi	r22, 0x05	; 5
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT,KPD_u8_C2_PIN,DIO_u8PIN_OUTPUT);
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	66 e0       	ldi	r22, 0x06	; 6
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT,KPD_u8_C3_PIN,DIO_u8PIN_OUTPUT);
 552:	41 e0       	ldi	r20, 0x01	; 1
 554:	67 e0       	ldi	r22, 0x07	; 7
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	
	DIO_u8SetPinDirection(KPD_u8_PORT,KPD_u8_R0_PIN,DIO_u8PIN_INPUT);
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT,KPD_u8_R1_PIN,DIO_u8PIN_INPUT);
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT,KPD_u8_R2_PIN,DIO_u8PIN_INPUT);
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	62 e0       	ldi	r22, 0x02	; 2
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_u8_PORT,KPD_u8_R3_PIN,DIO_u8PIN_INPUT);
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	63 e0       	ldi	r22, 0x03	; 3
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPortVa1ue   (KPD_u8_PORT,DIO_u8PORT_HIGH);
 584:	6f ef       	ldi	r22, 0xFF	; 255
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_u8SetPortVa1ue>
 58c:	08 95       	ret

0000058e <KPD_u8GetPressedKey>:
}


u8 KPD_u8GetPressedKey(void)
{
 58e:	af 92       	push	r10
 590:	bf 92       	push	r11
 592:	cf 92       	push	r12
 594:	df 92       	push	r13
 596:	ef 92       	push	r14
 598:	ff 92       	push	r15
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
 5a6:	64 97       	sbiw	r28, 0x14	; 20
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	f8 94       	cli
 5ac:	de bf       	out	0x3e, r29	; 62
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState,Local_u8PressedKey=KPD_u8_NO_PRESSED_KEY_VAL;
	
	u8 Local_u8ColumnArr[KPD_u8_COL_NUM]={KPD_u8_C0_PIN,KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN};
 5b2:	84 e0       	ldi	r24, 0x04	; 4
 5b4:	8a 83       	std	Y+2, r24	; 0x02
 5b6:	85 e0       	ldi	r24, 0x05	; 5
 5b8:	8b 83       	std	Y+3, r24	; 0x03
 5ba:	86 e0       	ldi	r24, 0x06	; 6
 5bc:	8c 83       	std	Y+4, r24	; 0x04
	
	u8 Local_u8RowArr[KPD_u8_ROW_NUM]={KPD_u8_R0_PIN,KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN};
 5be:	1d 82       	std	Y+5, r1	; 0x05
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	8e 83       	std	Y+6, r24	; 0x06
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	8f 83       	std	Y+7, r24	; 0x07
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	88 87       	std	Y+8, r24	; 0x08
	
	u8 Local_u8KPDArr[KPD_u8_ROW_NUM][KPD_u8_COL_NUM]=KPD_u8_BUTTON_VAL;
 5cc:	8c e0       	ldi	r24, 0x0C	; 12
 5ce:	e0 e6       	ldi	r30, 0x60	; 96
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	de 01       	movw	r26, r28
 5d4:	19 96       	adiw	r26, 0x09	; 9
 5d6:	01 90       	ld	r0, Z+
 5d8:	0d 92       	st	X+, r0
 5da:	8a 95       	dec	r24
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <KPD_u8GetPressedKey+0x48>
	
	for( Local_u8ColumnIdx = 0 ; Local_u8ColumnIdx < KPD_u8_COL_NUM ; Local_u8ColumnIdx++ )
 5de:	b1 2c       	mov	r11, r1
 5e0:	48 c0       	rjmp	.+144    	; 0x672 <KPD_u8GetPressedKey+0xe4>
	{
		/*1-Activate the current column*/
		//initially column pins output high
		//initially row pins input pulled up
		//activation signal low
		DIO_u8SetPinVa1ue(KPD_u8_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
 5e2:	cb 2c       	mov	r12, r11
 5e4:	d1 2c       	mov	r13, r1
 5e6:	e2 e0       	ldi	r30, 0x02	; 2
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	ec 0f       	add	r30, r28
 5ec:	fd 1f       	adc	r31, r29
 5ee:	ec 0d       	add	r30, r12
 5f0:	fd 1d       	adc	r31, r13
 5f2:	a0 80       	ld	r10, Z
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	6a 2d       	mov	r22, r10
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
		
		
		for( Local_u8RowIdx = 0 ; Local_u8RowIdx < KPD_u8_ROW_NUM ; Local_u8RowIdx++ )
 5fe:	10 e0       	ldi	r17, 0x00	; 0
 600:	30 c0       	rjmp	.+96     	; 0x662 <KPD_u8GetPressedKey+0xd4>
		{
			/*2-Read current rows*/
			DIO_u8GetPinVaIue(KPD_u8_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
 602:	e1 2e       	mov	r14, r17
 604:	f1 2c       	mov	r15, r1
 606:	e5 e0       	ldi	r30, 0x05	; 5
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	ec 0f       	add	r30, r28
 60c:	fd 1f       	adc	r31, r29
 60e:	ee 0d       	add	r30, r14
 610:	ff 1d       	adc	r31, r15
 612:	00 81       	ld	r16, Z
 614:	ae 01       	movw	r20, r28
 616:	4f 5f       	subi	r20, 0xFF	; 255
 618:	5f 4f       	sbci	r21, 0xFF	; 255
 61a:	60 2f       	mov	r22, r16
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_u8GetPinVaIue>
			
			/*3-Check if a button is pressed*/
			/*pull up when pressed button is active low*/
			if(Local_u8PinState == DIO_u8PIN_LOW)
 622:	89 81       	ldd	r24, Y+1	; 0x01
 624:	81 11       	cpse	r24, r1
 626:	1c c0       	rjmp	.+56     	; 0x660 <KPD_u8GetPressedKey+0xd2>
			{
				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
 628:	c7 01       	movw	r24, r14
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	e8 0e       	add	r14, r24
 630:	f9 1e       	adc	r15, r25
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	8c 0f       	add	r24, r28
 638:	9d 1f       	adc	r25, r29
 63a:	e8 0e       	add	r14, r24
 63c:	f9 1e       	adc	r15, r25
 63e:	f7 01       	movw	r30, r14
 640:	ec 0d       	add	r30, r12
 642:	fd 1d       	adc	r31, r13
 644:	10 85       	ldd	r17, Z+8	; 0x08
				
				/*5-wait until the key is released (polling or busy waiting)*/
				while(Local_u8PinState == DIO_u8PIN_LOW)
 646:	07 c0       	rjmp	.+14     	; 0x656 <KPD_u8GetPressedKey+0xc8>
				{
					DIO_u8GetPinVaIue(KPD_u8_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
 648:	ae 01       	movw	r20, r28
 64a:	4f 5f       	subi	r20, 0xFF	; 255
 64c:	5f 4f       	sbci	r21, 0xFF	; 255
 64e:	60 2f       	mov	r22, r16
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_u8GetPinVaIue>
			if(Local_u8PinState == DIO_u8PIN_LOW)
			{
				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
				
				/*5-wait until the key is released (polling or busy waiting)*/
				while(Local_u8PinState == DIO_u8PIN_LOW)
 656:	99 81       	ldd	r25, Y+1	; 0x01
 658:	99 23       	and	r25, r25
 65a:	b1 f3       	breq	.-20     	; 0x648 <KPD_u8GetPressedKey+0xba>
				{
					DIO_u8GetPinVaIue(KPD_u8_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				
				return Local_u8PressedKey;
 65c:	81 2f       	mov	r24, r17
 65e:	0e c0       	rjmp	.+28     	; 0x67c <KPD_u8GetPressedKey+0xee>
		//initially row pins input pulled up
		//activation signal low
		DIO_u8SetPinVa1ue(KPD_u8_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
		
		
		for( Local_u8RowIdx = 0 ; Local_u8RowIdx < KPD_u8_ROW_NUM ; Local_u8RowIdx++ )
 660:	1f 5f       	subi	r17, 0xFF	; 255
 662:	14 30       	cpi	r17, 0x04	; 4
 664:	70 f2       	brcs	.-100    	; 0x602 <KPD_u8GetPressedKey+0x74>
			}
			
			
		}
		/*4-deactivate current column with high, if row not low*/
		DIO_u8SetPinVa1ue(KPD_u8_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
 666:	41 e0       	ldi	r20, 0x01	; 1
 668:	6a 2d       	mov	r22, r10
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPinVa1ue>
	
	u8 Local_u8RowArr[KPD_u8_ROW_NUM]={KPD_u8_R0_PIN,KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN};
	
	u8 Local_u8KPDArr[KPD_u8_ROW_NUM][KPD_u8_COL_NUM]=KPD_u8_BUTTON_VAL;
	
	for( Local_u8ColumnIdx = 0 ; Local_u8ColumnIdx < KPD_u8_COL_NUM ; Local_u8ColumnIdx++ )
 670:	b3 94       	inc	r11
 672:	92 e0       	ldi	r25, 0x02	; 2
 674:	9b 15       	cp	r25, r11
 676:	08 f0       	brcs	.+2      	; 0x67a <KPD_u8GetPressedKey+0xec>
 678:	b4 cf       	rjmp	.-152    	; 0x5e2 <KPD_u8GetPressedKey+0x54>
		/*4-deactivate current column with high, if row not low*/
		DIO_u8SetPinVa1ue(KPD_u8_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
		
	}
	
	return Local_u8PressedKey;
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	64 96       	adiw	r28, 0x14	; 20
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	f8 94       	cli
 682:	de bf       	out	0x3e, r29	; 62
 684:	0f be       	out	0x3f, r0	; 63
 686:	cd bf       	out	0x3d, r28	; 61
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	ff 90       	pop	r15
 692:	ef 90       	pop	r14
 694:	df 90       	pop	r13
 696:	cf 90       	pop	r12
 698:	bf 90       	pop	r11
 69a:	af 90       	pop	r10
 69c:	08 95       	ret

0000069e <main>:

//	 APP
#include "3-APP/APP_interface.h"

int main(void)
{
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <main+0x6>
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <main+0x8>
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
	
	//      CALL FUNCTIONS
	KPD_init();
 6aa:	0e 94 9a 02 	call	0x534	; 0x534 <KPD_init>
	CLCD_voidInit();
 6ae:	0e 94 05 02 	call	0x40a	; 0x40a <CLCD_voidInit>
	UART_init();
 6b2:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_init>
	LED_voidInit( LED_PORTB , LED_PIN7 );
 6b6:	67 e0       	ldi	r22, 0x07	; 7
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 8c 02 	call	0x518	; 0x518 <LED_voidInit>
	TMR1_init();
 6be:	0e 94 bb 01 	call	0x376	; 0x376 <TMR1_init>
	

	//    initialization variables

	u8 Pressed_key = 0 ;
	u8 pass[4] = {'1','2','3','4'};
 6c2:	81 e3       	ldi	r24, 0x31	; 49
 6c4:	89 83       	std	Y+1, r24	; 0x01
 6c6:	82 e3       	ldi	r24, 0x32	; 50
 6c8:	8a 83       	std	Y+2, r24	; 0x02
 6ca:	83 e3       	ldi	r24, 0x33	; 51
 6cc:	8b 83       	std	Y+3, r24	; 0x03
 6ce:	84 e3       	ldi	r24, 0x34	; 52
 6d0:	8c 83       	std	Y+4, r24	; 0x04
	u8  counter = 0 , Check = 1 , count_wrong = 0 , RESET_SYS = 0 ;
 6d2:	f1 2c       	mov	r15, r1
 6d4:	11 e0       	ldi	r17, 0x01	; 1
 6d6:	00 e0       	ldi	r16, 0x00	; 0
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <main+0x40>
 6da:	11 e0       	ldi	r17, 0x01	; 1
 6dc:	00 e0       	ldi	r16, 0x00	; 0
	while (1)
	{
		
		
		do{
			Pressed_key=KPD_u8GetPressedKey();
 6de:	0e 94 c7 02 	call	0x58e	; 0x58e <KPD_u8GetPressedKey>
		}
		while(Pressed_key == 0xff);
 6e2:	8f 3f       	cpi	r24, 0xFF	; 255
 6e4:	e1 f3       	breq	.-8      	; 0x6de <main+0x40>
		
		switch (Pressed_key)
 6e6:	83 32       	cpi	r24, 0x23	; 35
 6e8:	91 f0       	breq	.+36     	; 0x70e <main+0x70>
 6ea:	8a 32       	cpi	r24, 0x2A	; 42
 6ec:	09 f0       	breq	.+2      	; 0x6f0 <main+0x52>
 6ee:	91 c0       	rjmp	.+290    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		{
			
			case '*' : CLCD_voidClear();
 6f0:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
					   
					   //    WHEN SYSTEM RESET
					   RESET_SYS = UART_RxChar();
 6f4:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
					   while( GET_BIT(RESET_SYS,7) )
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <main+0x6a>
					   {
						   CLCD_voidClear();
 6fa:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
						   RESET_SYS = UART_RxChar();
 6fe:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
						   counter = 0 ;
 702:	00 e0       	ldi	r16, 0x00	; 0
						   Check = 1 ;
 704:	11 e0       	ldi	r17, 0x01	; 1
						   count_wrong = 0 ;
 706:	f1 2c       	mov	r15, r1
			
			case '*' : CLCD_voidClear();
					   
					   //    WHEN SYSTEM RESET
					   RESET_SYS = UART_RxChar();
					   while( GET_BIT(RESET_SYS,7) )
 708:	88 23       	and	r24, r24
 70a:	bc f3       	brlt	.-18     	; 0x6fa <main+0x5c>
 70c:	e8 cf       	rjmp	.-48     	; 0x6de <main+0x40>
			 break;
			
			//__________________________________________
			
			case '#' : 
						if ( Check == 0 )
 70e:	11 11       	cpse	r17, r1
 710:	35 c0       	rjmp	.+106    	; 0x77c <main+0xde>
						{
							CLCD_voidClear();
 712:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
							CLCD_u8SendString("Wrong Password");
 716:	8c e6       	ldi	r24, 0x6C	; 108
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 6f 02 	call	0x4de	; 0x4de <CLCD_u8SendString>
 71e:	2f e3       	ldi	r18, 0x3F	; 63
 720:	8d e0       	ldi	r24, 0x0D	; 13
 722:	93 e0       	ldi	r25, 0x03	; 3
 724:	21 50       	subi	r18, 0x01	; 1
 726:	80 40       	sbci	r24, 0x00	; 0
 728:	90 40       	sbci	r25, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <main+0x86>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <main+0x90>
 72e:	00 00       	nop
							//////////
// 							CLCD_voidGoToXY(1,0);
// 							CLCD_u8SendChar(RESET_SYS);
							_delay_ms(1000);
							CLCD_voidClear();
 730:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
							count_wrong++ ;
 734:	f3 94       	inc	r15
							counter = 0 ;
							Check = 1 ;
							
							//    WHEN SYSTEM RESET
							RESET_SYS = UART_RxChar();
 736:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
							while( GET_BIT(RESET_SYS,7) )
 73a:	05 c0       	rjmp	.+10     	; 0x746 <main+0xa8>
							{
								CLCD_voidClear();
 73c:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
								RESET_SYS = UART_RxChar();
 740:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
								counter = 0 ;
								Check = 1 ;
								count_wrong = 0 ;
 744:	f1 2c       	mov	r15, r1
							counter = 0 ;
							Check = 1 ;
							
							//    WHEN SYSTEM RESET
							RESET_SYS = UART_RxChar();
							while( GET_BIT(RESET_SYS,7) )
 746:	88 23       	and	r24, r24
 748:	cc f3       	brlt	.-14     	; 0x73c <main+0x9e>
								RESET_SYS = UART_RxChar();
								counter = 0 ;
								Check = 1 ;
								count_wrong = 0 ;
							}
							if ( 3 == count_wrong)
 74a:	23 e0       	ldi	r18, 0x03	; 3
 74c:	f2 12       	cpse	r15, r18
 74e:	c5 cf       	rjmp	.-118    	; 0x6da <main+0x3c>
							{
								
								CLCD_u8SendString("System Locked^_^");
 750:	8b e7       	ldi	r24, 0x7B	; 123
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 6f 02 	call	0x4de	; 0x4de <CLCD_u8SendString>
								LED_voidOn(LED_PORTB , LED_PIN7 , SINK);
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	67 e0       	ldi	r22, 0x07	; 7
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	0e 94 90 02 	call	0x520	; 0x520 <LED_voidOn>
								
								//    WHEN SYSTEM RESET 
								RESET_SYS = UART_RxChar();
 762:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
								while( GET_BIT(RESET_SYS,7) )
 766:	05 c0       	rjmp	.+10     	; 0x772 <main+0xd4>
								{
									CLCD_voidClear();
 768:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
									RESET_SYS = UART_RxChar();
 76c:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
									counter = 0 ;
									Check = 1 ;
									count_wrong = 0 ;
 770:	f1 2c       	mov	r15, r1
								CLCD_u8SendString("System Locked^_^");
								LED_voidOn(LED_PORTB , LED_PIN7 , SINK);
								
								//    WHEN SYSTEM RESET 
								RESET_SYS = UART_RxChar();
								while( GET_BIT(RESET_SYS,7) )
 772:	88 23       	and	r24, r24
 774:	cc f3       	brlt	.-14     	; 0x768 <main+0xca>
 776:	11 e0       	ldi	r17, 0x01	; 1
 778:	00 e0       	ldi	r16, 0x00	; 0
 77a:	b1 cf       	rjmp	.-158    	; 0x6de <main+0x40>
									count_wrong = 0 ;
								}
								
							}
						}
						else if ( Check == 1 )
 77c:	11 30       	cpi	r17, 0x01	; 1
 77e:	09 f0       	breq	.+2      	; 0x782 <main+0xe4>
 780:	ae cf       	rjmp	.-164    	; 0x6de <main+0x40>
						{
							CLCD_voidClear();
 782:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
							CLCD_u8SendString("Welcome");
 786:	8c e8       	ldi	r24, 0x8C	; 140
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 6f 02 	call	0x4de	; 0x4de <CLCD_u8SendString>
 78e:	8f e3       	ldi	r24, 0x3F	; 63
 790:	9d e0       	ldi	r25, 0x0D	; 13
 792:	23 e0       	ldi	r18, 0x03	; 3
 794:	81 50       	subi	r24, 0x01	; 1
 796:	90 40       	sbci	r25, 0x00	; 0
 798:	20 40       	sbci	r18, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <main+0xf6>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <main+0x100>
 79e:	00 00       	nop
							_delay_ms(1000);
							CLCD_voidClear();
 7a0:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
							
							//  Open Door
							CLCD_u8SendString("Door Is Open");
 7a4:	84 e9       	ldi	r24, 0x94	; 148
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 6f 02 	call	0x4de	; 0x4de <CLCD_u8SendString>
							TMR1_setCompareMatchValueA(249);
 7ac:	89 ef       	ldi	r24, 0xF9	; 249
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 df 01 	call	0x3be	; 0x3be <TMR1_setCompareMatchValueA>
							TMR1_start();
 7b4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <TMR1_start>
 7b8:	8f e3       	ldi	r24, 0x3F	; 63
 7ba:	92 e4       	ldi	r25, 0x42	; 66
 7bc:	2f e0       	ldi	r18, 0x0F	; 15
 7be:	81 50       	subi	r24, 0x01	; 1
 7c0:	90 40       	sbci	r25, 0x00	; 0
 7c2:	20 40       	sbci	r18, 0x00	; 0
 7c4:	e1 f7       	brne	.-8      	; 0x7be <main+0x120>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <main+0x12a>
 7c8:	00 00       	nop
							_delay_ms(5000);
							CLCD_voidClear();
 7ca:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
							
							// Close Door 
							CLCD_u8SendString("Door Is Closed");
 7ce:	81 ea       	ldi	r24, 0xA1	; 161
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 6f 02 	call	0x4de	; 0x4de <CLCD_u8SendString>
 7d6:	8f e3       	ldi	r24, 0x3F	; 63
 7d8:	9d e0       	ldi	r25, 0x0D	; 13
 7da:	23 e0       	ldi	r18, 0x03	; 3
 7dc:	81 50       	subi	r24, 0x01	; 1
 7de:	90 40       	sbci	r25, 0x00	; 0
 7e0:	20 40       	sbci	r18, 0x00	; 0
 7e2:	e1 f7       	brne	.-8      	; 0x7dc <main+0x13e>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <main+0x148>
 7e6:	00 00       	nop
							_delay_ms(1000);
							TMR1_setCompareMatchValueA(499);
 7e8:	83 ef       	ldi	r24, 0xF3	; 243
 7ea:	91 e0       	ldi	r25, 0x01	; 1
 7ec:	0e 94 df 01 	call	0x3be	; 0x3be <TMR1_setCompareMatchValueA>
							TMR1_start();
 7f0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <TMR1_start>
							//    WHEN SYSTEM RESET
							RESET_SYS = UART_RxChar();
 7f4:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
							while( GET_BIT(RESET_SYS,7) )
 7f8:	91 2f       	mov	r25, r17
 7fa:	07 c0       	rjmp	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
							{
								CLCD_voidClear();
 7fc:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
								RESET_SYS = UART_RxChar();
 800:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
								counter = 0 ;
 804:	00 e0       	ldi	r16, 0x00	; 0
								Check = 1 ;
								count_wrong = 0 ;
 806:	f1 2c       	mov	r15, r1
							while( GET_BIT(RESET_SYS,7) )
							{
								CLCD_voidClear();
								RESET_SYS = UART_RxChar();
								counter = 0 ;
								Check = 1 ;
 808:	91 2f       	mov	r25, r17
							_delay_ms(1000);
							TMR1_setCompareMatchValueA(499);
							TMR1_start();
							//    WHEN SYSTEM RESET
							RESET_SYS = UART_RxChar();
							while( GET_BIT(RESET_SYS,7) )
 80a:	88 23       	and	r24, r24
 80c:	bc f3       	brlt	.-18     	; 0x7fc <main+0x15e>
 80e:	19 2f       	mov	r17, r25
 810:	66 cf       	rjmp	.-308    	; 0x6de <main+0x40>
						 
			//___________________________________________________________
			
			
			default: 
					 if ( pass[counter] != Pressed_key ) 
 812:	e1 e0       	ldi	r30, 0x01	; 1
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	ec 0f       	add	r30, r28
 818:	fd 1f       	adc	r31, r29
 81a:	e0 0f       	add	r30, r16
 81c:	f1 1d       	adc	r31, r1
 81e:	90 81       	ld	r25, Z
 820:	89 13       	cpse	r24, r25
					 {
						 Check =0 ;
 822:	10 e0       	ldi	r17, 0x00	; 0
					 }
					 CLCD_u8SendChar(Pressed_key);
 824:	0e 94 4c 02 	call	0x498	; 0x498 <CLCD_u8SendChar>
					 counter++;
 828:	0f 5f       	subi	r16, 0xFF	; 255
					 //    WHEN SYSTEM RESET
					 RESET_SYS = UART_RxChar();
 82a:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
					 while( GET_BIT(RESET_SYS,7) )
 82e:	07 c0       	rjmp	.+14     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
					 {
						 CLCD_voidClear();
 830:	0e 94 82 02 	call	0x504	; 0x504 <CLCD_voidClear>
						 RESET_SYS = UART_RxChar();
 834:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_RxChar>
						 counter = 0 ;
 838:	00 e0       	ldi	r16, 0x00	; 0
						 Check = 1 ;
 83a:	11 e0       	ldi	r17, 0x01	; 1
						 count_wrong = 0 ;
 83c:	f1 2c       	mov	r15, r1
					 }
					 CLCD_u8SendChar(Pressed_key);
					 counter++;
					 //    WHEN SYSTEM RESET
					 RESET_SYS = UART_RxChar();
					 while( GET_BIT(RESET_SYS,7) )
 83e:	88 23       	and	r24, r24
 840:	bc f3       	brlt	.-18     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 842:	4d cf       	rjmp	.-358    	; 0x6de <main+0x40>

00000844 <_exit>:
 844:	f8 94       	cli

00000846 <__stop_program>:
 846:	ff cf       	rjmp	.-2      	; 0x846 <__stop_program>
